name: Backend CI

on:
  push:
    branches: ['main']
  pull_request:
    branches: ['main']
    
jobs:
  run-and-test:
    runs-on: ubuntu-latest

    defaults:
      run:
        working-directory: ./backend

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'
          cache: 'pip'
          cache-dependency-path: backend/requirements.txt

      - name: Install dependencies
        run: pip install -r requirements.txt

      - name: Install jq
        run: sudo apt-get update && sudo apt-get install -y jq
      
      - name: Ensure clean database state
        run: rm -f courses.db

      - name: Run server in background
        run: uvicorn server:app --host 0.0.0.0 --port 8000 &

      - name: Wait for server to be ready
        run: |
          echo "Waiting for server..."
          while ! curl -s http://localhost:8000/api/health > /dev/null; do
            sleep 1
          done
          echo "Server is up!"

      - name: Test /api/courses endpoint
        run: curl --fail http://localhost:8000/api/courses | jq .

      - name: Test /api/profile/sdi endpoint
        run: |
          response=$(curl --fail -s http://localhost:8000/api/profile/sdi)
          echo "SDI response: $response"
          echo "$response" | jq -e '.sdi == 2400120'

      - name: Test /api/profile/first_name endpoint
        run: |
          response=$(curl --fail -s http://localhost:8000/api/profile/first_name)
          echo "Firstname response: $response"
          echo "$response" | jq -e '.first_name == "Anastasia"'

      - name: Test /api/profile/last_name endpoint
        run: |
          response=$(curl --fail -s http://localhost:8000/api/profile/last_name)
          echo "Lastname response: $response"
          echo "$response" | jq -e '.last_name == "Marinakou"'

      - name: Test /api/profile/current_semester endpoint
        run: |
          response=$(curl --fail -s http://localhost:8000/api/profile/current_semester)
          echo "Lastname response: $response"
          echo "$response" | jq -e '.current_semester == 2'

      - name: Test getting initial direction
        run: |
          response=$(curl --fail -s http://localhost:8000/api/profile/direction)
          echo "Initial direction response: $response"
          
          echo "$response" | jq -e '.direction == null'

      - name: Test updating direction
        run: |
          curl --fail -X PUT \
            -H "Content-Type: application/json" \
            -d '{"direction": "CS"}' \
            http://localhost:8000/api/profile/direction

          response=$(curl --fail -s http://localhost:8000/api/profile/direction)
          echo "Updated direction response: $response"
          echo "$response" | jq -e '.direction == "CS"'
          
      - name: Update course status
        run: |
          curl --fail -X PUT \
            -H "Content-Type: application/json" \
            -d '{"status": "Passed"}' \
            http://localhost:8000/api/courses/1/status

      - name: Update course grade
        run: |
          curl --fail -X PUT \
          -H "Content-Type: application/json" \
          -d '{"grade": 8}' \
          http://localhost:8000/api/courses/1/grade

      - name: Update course planned semester
        run: |
          curl --fail -X PUT \
          -H "Content-Type: application/json" \
          -d '{"planned_semester": 3}' \
          http://localhost:8000/api/courses/1/planned_semester

      - name: Test update profile sdi
        run: |
          curl --fail -X PUT \
          -H "Content-Type: application/json" \
          -d '{"sdi": 2400000}' \
          http://localhost:8000/api/profile/sdi

          response=$(curl --fail -s http://localhost:8000/api/profile/sdi)
          echo "Updated sdi response: $response"
          echo "$response" | jq -e '.sdi == 2400000'

      - name: Update profile firstname
        run: |
          curl --fail -X PUT \
          -H "Content-Type: application/json" \
          -d '{"first_name": "Maria"}' \
          http://localhost:8000/api/profile/first_name

          response=$(curl --fail -s http://localhost:8000/api/profile/first_name)
          echo "Updated firstname response: $response"
          echo "$response" | jq -e '.first_name == "Maria"'

      - name: Update profile lastname
        run: |
          curl --fail -X PUT \
          -H "Content-Type: application/json" \
          -d '{"last_name": "Papadopoulou"}' \
          http://localhost:8000/api/profile/last_name

          response=$(curl --fail -s http://localhost:8000/api/profile/last_name)
          echo "Updated lastname response: $response"
          echo "$response" | jq -e '.last_name == "Papadopoulou'

      - name: Update profile current semester
        run: |
          curl --fail -X PUT \
          -H "Content-Type: application/json" \
          -d '{"current_semester": 5}' \
          http://localhost:8000/api/profile/current_semester

          response=$(curl --fail -s http://localhost:8000/api/profile/current_semester)
          echo "Updated current semester response: $response"
          echo "$response" | jq -e '.current_semester == 5'

      - name: Verify course status was updated
        run: |
          curl -s http://localhost:8000/api/courses | jq -e '.[] | select(.id == 1) | .status == "Passed"'
          
      - name: Verify course grade was updated
        run: |
          curl -s http://localhost:8000/api/courses | jq -e '.[] | select(.id == 1) | .grade == 8.0'

      - name: Verify course planned semester was updated
        run: |
          curl -s http://localhost:8000/api/courses | jq -e '.[] | select(.id == 1) | .planned_semester == 3'

      - name: Reset course status
        run: |
          curl --fail -X PUT \
            -H "Content-Type: application/json" \
            -d '{"status": "Not Taken"}' \
            http://localhost:8000/api/courses/1/status

      - name: Verify course status was reset
        run: |
          curl -s http://localhost:8000/api/courses | jq -e '.[] | select(.id == 1) | .status == "Not Taken"'
      